const int INF = numeric_limits<int>::max();
class Solution {
public:
vector<int> dijkstra(int start, const vector<vector<pair<int, int>>>& adj, int n) {
    vector<int> dist(n, INF);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
    
    dist[start] = 0;
    pq.push({0, start});
    
    while (!pq.empty()) {
        int u = pq.top().second;
        int d = pq.top().first;
        pq.pop();
        
        if (d > dist[u]) continue;
        
        for (const auto& neighbor : adj[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v], v});
            }
        }
    }
    
    return dist;
}
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<vector<pair<int, int>>> adj(n);
    
    for (const auto& edge : edges) {
        int u = edge[0];
        int v = edge[1];
        int w = edge[2];
        adj[u].emplace_back(v, w);
        adj[v].emplace_back(u, w);
    }
    
    vector<int> cityCounts(n, 0);
    
    for (int i = 0; i < n; ++i) {
        vector<int> dist = dijkstra(i, adj, n);
        int count = 0;
        for (int d : dist) {
            if (d <= distanceThreshold) {
                ++count;
            }
        }
        cityCounts[i] = count;
    }
    
    int minReachable = INF;
    int resultCity = -1;
    
    for (int i = 0; i < n; ++i) {
        if (cityCounts[i] < minReachable || (cityCounts[i] == minReachable && i > resultCity)) {
            minReachable = cityCounts[i];
            resultCity = i;
        }
    }
    
    return resultCity;
    }
};
