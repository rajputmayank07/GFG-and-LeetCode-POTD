class Solution {
    //using merge sort
public:
void merge(vector<int>& nums,int left,int mid,int right){
    //kyunki nums ko hi change kar denge, isliye uski left half aur right half ki values ko hold karane ke liye 2 temporary arrays ki zaroorat hogi
    int m= mid-left+1;
    int n= right-mid;
    vector<int>t1(m);
    vector<int>t2(n);
    //copying the values of nums into these two arrays
    for(int i=0;i<m;i++){
        t1[i]=nums[left+i];
    }
    for(int j=0;j<n;j++){
        t2[j]=nums[mid+1+j];
    }

    int i=0,j=0,k=left;
    while(i<m and j<n){
        if (t1[i] <= t2[j]) {
                nums[k++] = t1[i++];
            } else {
                nums[k++] = t2[j++];
            }
    }
    while(i<m){
        nums[k++]=t1[i++];
    }
    while(j<n){
        nums[k++]=t2[j++];
    }
}

void mergesort(vector<int>& nums,int left,int right){
    if(left<right){
        int mid =left+(right-left)/2;
        mergesort(nums,left,mid);
        mergesort(nums,mid+1,right);
        merge(nums,left,mid,right);

    }
}

vector<int> sortArray(vector<int>& nums) {

    mergesort(nums,0,nums.size()-1);
    return nums;
    }
};
